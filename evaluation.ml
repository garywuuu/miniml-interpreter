(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;; 

(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
    (* the type of values stored in environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      match List.assoc varname env with 
      | n -> !n   
      | exception Not_found -> raise (EvalError "not found") ;;  

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      let e = ref env in e := (List.remove_assoc varname !e) ; e := !e @ [varname, loc] ; !e ;;

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      (* if not printenvp then match v with  *) 
      match v with 
      | Val exp -> exp_to_concrete_string exp
      | Closure (exp, env) -> if not printenvp then exp_to_concrete_string exp 
                              else env_to_string env ^ exp_to_concrete_string exp 
       and
    env_to_string (env : env) : string =
      "{" ^ match env with 
      | [] -> "}"
      | (v, e) :: t -> v ^ value_to_string !e ^ env_to_string t 
      ;;
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (_exp : expr) (_env : Env.env) : Env.value =
  (* val_to_expr lets us handle subst cases later where we need the exp of an evaluated exp *)
  let val_to_expr (exp : expr) : expr = 
    match eval_s exp _env with 
    | Env.Val exp -> exp
    | Env.Closure (_, env) -> raise (EvalError "Closure") in

  match _exp with 
  | Num _ | Float _ | Bool _ | String _ | Fun _ -> Env.Val _exp 
  | Var _ -> raise (EvalError "unbound") 
  | Unop (un, e) -> (match un, e with 
    | Negate, Num n -> Env.Val (Num (~-n))
    | Negate, Float f -> Env.Val (Float (-1. *. f))
    | Abs, Num n -> Env.Val (Num (abs n))
    | Abs, Float f -> Env.Val (Float (abs_float f))
    | _ -> raise (EvalError "can not perform unop on number-less expression"))
  | Binop (bin, e1, e2) -> (match eval_s e1 _env, eval_s e2 _env with 
                            | Env.Val (Num a), Env.Val (Num b) ->  
                              (match bin with  
                              | Plus -> Env.Val (Num (a + b))
                              | Times -> Env.Val (Num (a * b))
                              | Divide -> Env.Val (Num (a / b))
                              | Minus -> Env.Val (Num (a - b))
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool (a < b))
                              | GreaterThan -> Env.Val (Bool (a > b))
                              | Power -> Env.Val (Num (int_of_float 
                                ((float_of_int a) ** (float_of_int b))))
                              | _ -> raise (EvalError "invalid binop"))
                            | Env.Val (Float a), Env.Val (Float b) -> 
                              (match bin with 
                              | Plus -> Env.Val (Float (a +. b))
                              | Times -> Env.Val (Float (a *. b))
                              | Divide -> Env.Val (Float (a /. b))
                              | Minus -> Env.Val (Float (a -. b))
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool (a < b))
                              | GreaterThan -> Env.Val (Bool (a > b))
                              | Power -> Env.Val (Float (a ** b))
                              | _ -> raise (EvalError "invalid binop"))
                            | Env.Val (Bool a), Env.Val (Bool b) -> 
                              (match bin with 
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool(a < b))
                              | _ -> raise (EvalError "invalid binop"))
                            | Env.Val (String a), Env.Val (String b) -> 
                              (match bin with
                              | Concat -> Env.Val (String (a ^ b))
                              | _ -> raise (EvalError "only concat for strings"))
                            | _,  _  -> raise (EvalError "must be valid Binop"))
  | Conditional (e1, e2, e3) -> (match eval_s e1 _env with 
    | Env.Val (Bool true) -> eval_s e2 _env 
    | Env.Val (Bool false) -> eval_s e3 _env
    | _ -> raise (EvalError "bad conditional"))
  | Let (x, e1, e2) ->  eval_s (subst x (val_to_expr e1) e2) _env
  | Letrec (x, e1, e2) ->
      let vD = val_to_expr e1 in
      (eval_s
       (subst x
              (val_to_expr (subst x (Letrec (x, vD, Var x)) vD)) 
              e2)
      _env)
  | App (e1, e2) -> (match eval_s e1 _env with
    | Env.Val (Fun (a, b)) -> eval_s (subst a (val_to_expr e2) b) _env
    | _ -> raise (EvalError "invalid application"))
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "unassigned") ;; 

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let rec eval_d (_exp : expr) (_env : Env.env) : Env.value =
  (* val_to_expr lets us handle subst cases later where we need the exp of an evaluated exp *)
  (* let val_to_expr (exp : expr) (env : Env.env): expr = 
    match eval_d exp env with 
    | Val exp -> exp
    | Closure (exp, env) -> raise EvalException in *)

  match _exp with 
  | Num _| Float _ | Bool _ | String _| Fun _ -> Env.Val _exp 
  | Var v -> (match Env.lookup _env v with 
    | n -> n 
    | exception _ -> Env.Val (Var v))
  | Unop (un, e) -> (match un, e with 
    | Negate, Num n -> Env.Val (Num (~-n))
    | Negate, Float f -> Env.Val (Float (-1. *. f))
    | Abs, Num n -> Env.Val (Num (abs n))
    | Abs, Float f -> Env.Val (Float (abs_float f))
    | _ -> raise (EvalError "can not perform unop on number-less expression"))
  | Binop (bin, e1, e2) -> (match eval_d e1 _env, eval_d e2 _env with 
                            | Env.Val (Num a), Env.Val (Num b) ->  
                              (match bin with  
                              | Plus -> Env.Val (Num (a + b))
                              | Times -> Env.Val (Num (a * b))
                              | Divide -> Env.Val (Num (a / b))
                              | Minus -> Env.Val (Num (a - b))
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool (a < b))
                              | GreaterThan -> Env.Val (Bool (a > b))
                              | Power -> Env.Val (Num (int_of_float 
                                ((float_of_int a) ** (float_of_int b))))
                              | _ -> raise (EvalError "can't concat non_strings"))
                            | Env.Val (Float a), Env.Val (Float b) -> 
                              (match bin with 
                              | Plus -> Env.Val (Float (a +. b))
                              | Times -> Env.Val (Float (a *. b))
                              | Divide -> Env.Val (Float (a /. b))
                              | Minus -> Env.Val (Float (a -. b))
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool (a < b))
                              | GreaterThan -> Env.Val (Bool (a > b))
                              | Power -> Env.Val (Float (a ** b))
                              | _ -> raise (EvalError "can't concat non_strings"))
                            | Env.Val (Bool a), Env.Val (Bool b) -> 
                              (match bin with 
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool(a < b))
                              | _ -> raise (EvalError "must be valid Binop"))
                            | Env.Val (String a), Env.Val (String b) -> 
                              (match bin with 
                              | Concat -> Env.Val (String (a ^ b))
                              | _ -> raise (EvalError "can't concat non_strings"))
                            | _,  _  -> raise (EvalError "must be valid Binop"))
  | Conditional (e1, e2, e3) -> (match eval_d e1 _env with 
    | Env.Val (Bool true) -> eval_d e2 _env 
    | Env.Val (Bool false) -> eval_d e3 _env
    | _ -> raise (EvalError "bad conditional"))
  | Let (x, e1, e2) | Letrec (x, e1, e2) ->  
    let vD = ref (eval_d e1 _env) in
    (eval_d e2 (Env.extend _env x vD)) 
  | App (e1, e2) -> 
    let vQ = ref (eval_d e2 _env) in 
    (match eval_d e1 _env with 
    | Env.Val (Fun (a, b)) -> eval_d (b) (Env.extend _env a vQ)
    | _ -> raise (EvalError "invalid application"))
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "unassigned");;

(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (_exp : expr) (_env : Env.env) : Env.value =
  (* val_to_expr lets us handle subst cases later where we need the exp of an evaluated exp *)
  match _exp with 
  | Num _| Float _ | String _ | Bool _ -> Env.Val _exp 
  | Var v  -> (match Env.lookup _env v with 
    | n -> n 
    | exception _ -> Env.Val (Var v))
  | Unop (un, e) -> (match un, e with 
    | Negate, Num n -> Env.Val (Num (~-n))
    | Negate, Float f -> Env.Val (Float (-1. *. f))
    | Abs, Num n -> Env.Val (Num (abs n))
    | Abs, Float f -> Env.Val (Float (abs_float f))
    | _ -> raise (EvalError "can not perform unop on number-less expression"))
  | Binop (bin, e1, e2) -> (match eval_l e1 _env, eval_l e2 _env with 
                            | Env.Val (Num a), Env.Val (Num b) ->  
                              (match bin with  
                              | Plus -> Env.Val (Num (a + b))
                              | Times -> Env.Val (Num (a * b))
                              | Divide -> Env.Val (Num (a / b))
                              | Minus -> Env.Val (Num (a - b))
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool (a < b))
                              | GreaterThan -> Env.Val (Bool (a > b))
                              | Power -> Env.Val (Num (int_of_float 
                                ((float_of_int a) ** (float_of_int b))))
                              | _ -> raise (EvalError "can't concat non_strings"))
                            | Env.Val (Float a), Env.Val (Float b) -> 
                              (match bin with 
                              | Plus -> Env.Val (Float (a +. b))
                              | Times -> Env.Val (Float (a *. b))
                              | Divide -> Env.Val (Float (a /. b))
                              | Minus -> Env.Val (Float (a -. b))
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool (a < b))
                              | GreaterThan -> Env.Val (Bool (a > b))
                              | Power -> Env.Val (Float (a ** b))
                              | _ -> raise (EvalError "can't concat non_strings"))
                            | Env.Val (Bool a), Env.Val (Bool b) -> 
                              (match bin with 
                              | Equals -> Env.Val (Bool (a = b))
                              | LessThan -> Env.Val (Bool(a < b))
                              | _ -> raise (EvalError "must be valid Binop"))
                            | Env.Val (String a), Env.Val (String b) -> 
                              (match bin with 
                              | Concat -> Env.Val (String (a ^ b))
                              | _ -> raise (EvalError "can't concat non_strings"))
                            | _,  _  -> raise (EvalError "must be valid Binop"))
  | Conditional (e1, e2, e3) -> (match eval_l e1 _env with 
    | Env.Val (Bool true) -> eval_l e2 _env 
    | Env.Val (Bool false) -> eval_l e3 _env
    | _ -> raise (EvalError "bad conditional"))
  | Fun (va, e2) -> Env.Closure (Fun (va, e2), _env)
  | Let (x, e1, e2) -> let vD = ref (eval_l e1 _env) in
      (eval_l e2 
      (Env.extend _env x vD)) 
  | Letrec (x, e1, e2) ->  
      let s = ref (Env.Val Unassigned) in 
      let nenv = Env.extend _env x s in 
      let vD = eval_l e1 nenv in 
      s := vD ; (eval_l e2 nenv) 

  | App (e1, e2) ->  
    let vQ = ref (eval_l e2 _env) in 
    (match eval_l e1 _env with 
    | Env.Closure (Fun (a, b), env) -> eval_l b (Env.extend env a vQ) 
    | _ -> raise (EvalError "invalid application"))
  | Raise -> raise EvalException
  | Unassigned -> raise (EvalError "unassigned");;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_l;;
